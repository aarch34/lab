import numpy as np

def min_edit_distance(str1, str2):
    m, n = len(str1), len(str2)
    dp = np.zeros((m + 1, n + 1), dtype=int)

    
    for i in range(m + 1):
        dp[i][0] = i 
    for j in range(n + 1):
        dp[0][j] = j  

    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]  
            else:
                dp[i][j] = 1 + min(dp[i - 1][j],    
                                   dp[i][j - 1],     
                                   dp[i - 1][j - 1]) 

    return dp[m][n]


pairs = [
    ("kitten", "sitting"),
    ("flaw", "lawn"),
    ("hello", "helo"),
    ("example", "exampel"),
    ("abcdef", "azced")
]

print("Using custom NumPy-based implementation:")
for s1, s2 in pairs:
    print(f"Edit Distance between '{s1}' and '{s2}': {min_edit_distance(s1, s2)}")



#using NLTK
import nltk
from nltk.metrics import edit_distance

def test_med(str1, str2):
    """Compute and print the Minimum Edit Distance between two strings."""
    distance = edit_distance(str1, str2)
    print(f"Edit Distance between '{str1}' and '{str2}': {distance}")


test_cases = [
    ("kitten", "sitting"),
    ("flaw", "lawn"),
    ("intention", "execution"),
    ("hello", "helo"),
    ("abcdef", "azced"),
    ("example", "exampel")
]

print("\nUsing NLTK's edit_distance:")
for str1, str2 in test_cases:
    test_med(str1, str2)
